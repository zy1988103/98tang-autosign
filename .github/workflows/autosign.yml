# 98tang Auto Sign-in
# 完整配置说明请参考: docs/configuration.md
name: 98tang Auto Sign-in

on:
  schedule:
    # 每天北京时间0:00执行 (UTC+8 = UTC+0-8, 所以0点对应UTC 16点)
    # 注意：schedule 只在默认分支(main)上运行
    - cron: '0 16 * * *'   # 北京时间 0:20
  workflow_dispatch:
    # 允许手动触发 - 可在任何分支运行
  push:
    # 当推送到main分支时触发（develop分支不会自动运行）
    branches: [ main ]
  pull_request:
    # 当创建PR到指定分支时触发（可选，用于测试）
    branches: [ main ]

jobs:
  # Environment secrets模式（优先）- 使用98tang-autosign环境
  autosign-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: 98tang-autosign
    # 确保只在main分支上运行自动签到
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      failure_reason: ${{ steps.check_config.outputs.failure_reason }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装系统依赖和中文字体
      run: |
        # 更新包管理器
        sudo apt-get update
        
        # 安装中文字体支持
        sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
        sudo apt-get install -y language-pack-zh-hans
        
        # 设置字体缓存
        sudo fc-cache -fv
        
        # 验证中文字体安装
        echo "✅ 已安装的中文字体:"
        fc-list :lang=zh | head -5
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 验证必需配置
      id: check_config
      run: |
        if [ -z "${{ secrets.SITE_USERNAME }}" ] || [ -z "${{ secrets.SITE_PASSWORD }}" ]; then
          echo "❌ 缺少必需的 Environment Secrets 配置"
          echo "请在仓库设置的 98tang-autosign 环境中添加 SITE_USERNAME 和 SITE_PASSWORD"
          echo "failure_reason=missing_environment_secrets" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "✅ 配置验证通过 (Environment secrets模式: 98tang-autosign)"
        
    - name: 显示执行时间
      run: |
        echo "⏰ 当前UTC时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🌏 当前北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "🚀 开始执行自动签到任务"
        
    - name: 执行自动签到
      env:
        # 必需配置
        SITE_USERNAME: ${{ secrets.SITE_USERNAME }}
        SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
        
        # 安全提问配置
        ENABLE_SECURITY_QUESTION: ${{ vars.ENABLE_SECURITY_QUESTION || 'false' }}
        SECURITY_QUESTION: ${{ secrets.SECURITY_QUESTION }}
        SECURITY_ANSWER: ${{ secrets.SECURITY_ANSWER }}
        
        # 核心功能配置
        BASE_URL: ${{ vars.BASE_URL || 'https://www.sehuatang.org' }}
        ENABLE_CHECKIN: ${{ vars.ENABLE_CHECKIN || 'true' }}
        
        # 拟人化行为配置
        ENABLE_REPLY: ${{ vars.ENABLE_REPLY || 'true' }}
        REPLY_COUNT: ${{ vars.REPLY_COUNT || '2' }}
        ENABLE_RANDOM_BROWSING: ${{ vars.ENABLE_RANDOM_BROWSING || 'true' }}
        BROWSE_PAGE_COUNT: ${{ vars.BROWSE_PAGE_COUNT || '3' }}
        COMMENT_INTERVAL: ${{ vars.COMMENT_INTERVAL || '15' }}
        WAIT_AFTER_LOGIN: ${{ vars.WAIT_AFTER_LOGIN || '5' }}
        REPLY_MESSAGES: ${{ vars.REPLY_MESSAGES || '感谢分享资源，收藏了;好资源收藏了，谢谢楼主;感谢楼主的精彩分享;谢谢分享，感谢精彩资源;好内容，支持一下楼主' }}
        
        # 延迟优化配置
        TIMING_MULTIPLIER: ${{ vars.TIMING_MULTIPLIER || '1.0' }}
        ENABLE_SMART_TIMING: ${{ vars.ENABLE_SMART_TIMING || 'true' }}
        
        # Telegram通知配置
        ENABLE_TELEGRAM_NOTIFICATION: ${{ vars.ENABLE_TELEGRAM_NOTIFICATION || 'false' }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_PROXY_URL: ${{ secrets.TELEGRAM_PROXY_URL }}
        TELEGRAM_SEND_LOG_FILE: ${{ vars.TELEGRAM_SEND_LOG_FILE || 'true' }}  # GitHub Actions 默认启用日志推送
        TELEGRAM_SEND_SCREENSHOT: ${{ vars.TELEGRAM_SEND_SCREENSHOT || 'false' }}  # GitHub Actions 默认启用截图
        
        # 系统配置（强制设置）
        HEADLESS: 'true'  # Github Action 强制无头模式
        LOG_LEVEL: ${{ vars.LOG_LEVEL || 'DEBUG' }}  # GitHub Actions 默认使用 DEBUG 级别
        MAX_LOG_FILES: ${{ vars.MAX_LOG_FILES || '7' }}
        MAX_RETRIES: ${{ vars.MAX_RETRIES || '3' }}
        TIMEOUT_MINUTES: ${{ vars.TIMEOUT_MINUTES || '5' }}
        
        # 中文字体和编码支持
        LANG: 'zh_CN.UTF-8'
        LC_ALL: 'zh_CN.UTF-8'
        PYTHONIOENCODING: 'utf-8'
        PYTHONUTF8: '1'
        
      run: |
        echo "🚀 开始执行自动签到 (Environment secrets模式: 98tang-autosign)..."
        echo "📅 实际执行时间: $(date '+%Y-%m-%d %H:%M:%S') UTC"
        echo "🌏 北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "⏰ 调度策略: 北京时间0:00~0:30随机执行"
        echo "👤 用户名: $(echo $SITE_USERNAME | head -c 2)****$(echo $SITE_USERNAME | tail -c 3)"
        echo "🔗 目标网站: $BASE_URL"
        echo ""
        
        python main.py
        
    - name: 上传日志和调试文件
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: autosign-logs-environment-${{ github.run_number }}
        path: |
          logs/
        retention-days: 30
        
    - name: 执行结果通知
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ 自动签到执行成功 (Environment secrets模式: 98tang-autosign)"
        else
          echo "❌ 自动签到执行失败"
          echo "请查看日志了解详细信息"
        fi

  # Repository secrets模式（智能回退）- 当Environment secrets不可用时使用
  autosign-repository:
    # 只有当Environment secrets模式失败且是配置问题时才运行，且只在main分支上运行
    if: failure() && needs.autosign-environment.result == 'failure' && needs.autosign-environment.outputs.failure_reason == 'missing_environment_secrets' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    needs: autosign-environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 安装系统依赖和中文字体
      run: |
        # 更新包管理器
        sudo apt-get update
        
        # 安装中文字体支持
        sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
        sudo apt-get install -y language-pack-zh-hans
        
        # 设置字体缓存
        sudo fc-cache -fv
        
        # 验证中文字体安装
        echo "✅ 已安装的中文字体:"
        fc-list :lang=zh | head -5
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 验证必需配置
      run: |
        if [ -z "${{ secrets.SITE_USERNAME }}" ] || [ -z "${{ secrets.SITE_PASSWORD }}" ]; then
          echo "❌ 缺少必需的 Repository Secrets 配置"
          echo "请在仓库设置中添加 SITE_USERNAME 和 SITE_PASSWORD"
          echo "或者在 98tang-autosign 环境中配置 Environment Secrets"
          exit 1
        fi
        echo "✅ 配置验证通过 (Repository secrets模式 - 回退模式)"
        echo "⚠️ 建议配置 98tang-autosign 环境以获得更好的安全性"
        
    - name: 显示执行时间
      run: |
        echo "⏰ 当前UTC时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🌏 当前北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "🚀 开始执行自动签到任务"
        
    - name: 执行自动签到
      env:
        # 必需配置
        SITE_USERNAME: ${{ secrets.SITE_USERNAME }}
        SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
        
        # 安全提问配置
        ENABLE_SECURITY_QUESTION: ${{ vars.ENABLE_SECURITY_QUESTION || 'false' }}
        SECURITY_QUESTION: ${{ secrets.SECURITY_QUESTION }}
        SECURITY_ANSWER: ${{ secrets.SECURITY_ANSWER }}
        
        # 核心功能配置
        BASE_URL: ${{ vars.BASE_URL || 'https://www.sehuatang.org' }}
        ENABLE_CHECKIN: ${{ vars.ENABLE_CHECKIN || 'true' }}
        
        # 拟人化行为配置
        ENABLE_REPLY: ${{ vars.ENABLE_REPLY || 'true' }}
        REPLY_COUNT: ${{ vars.REPLY_COUNT || '2' }}
        ENABLE_RANDOM_BROWSING: ${{ vars.ENABLE_RANDOM_BROWSING || 'true' }}
        BROWSE_PAGE_COUNT: ${{ vars.BROWSE_PAGE_COUNT || '3' }}
        COMMENT_INTERVAL: ${{ vars.COMMENT_INTERVAL || '15' }}
        WAIT_AFTER_LOGIN: ${{ vars.WAIT_AFTER_LOGIN || '5' }}
        REPLY_MESSAGES: ${{ vars.REPLY_MESSAGES || '感谢分享资源，收藏了;好资源收藏了，谢谢楼主;感谢楼主的精彩分享;谢谢分享，非常实用;好内容，支持一下楼主' }}
        
        # 延迟优化配置
        TIMING_MULTIPLIER: ${{ vars.TIMING_MULTIPLIER || '1.0' }}
        ENABLE_SMART_TIMING: ${{ vars.ENABLE_SMART_TIMING || 'true' }}
        
        # Telegram通知配置
        ENABLE_TELEGRAM_NOTIFICATION: ${{ vars.ENABLE_TELEGRAM_NOTIFICATION || 'false' }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_PROXY_URL: ${{ secrets.TELEGRAM_PROXY_URL }}
        TELEGRAM_SEND_LOG_FILE: ${{ vars.TELEGRAM_SEND_LOG_FILE || 'true' }}  # GitHub Actions 默认启用日志推送
        TELEGRAM_SEND_SCREENSHOT: ${{ vars.TELEGRAM_SEND_SCREENSHOT || 'true' }}  # GitHub Actions 默认启用截图
        
        # 系统配置（强制设置）
        HEADLESS: 'true'  # Github Action 强制无头模式
        LOG_LEVEL: ${{ vars.LOG_LEVEL || 'DEBUG' }}  # GitHub Actions 默认使用 DEBUG 级别
        MAX_LOG_FILES: ${{ vars.MAX_LOG_FILES || '7' }}
        MAX_RETRIES: ${{ vars.MAX_RETRIES || '3' }}
        TIMEOUT_MINUTES: ${{ vars.TIMEOUT_MINUTES || '5' }}
        
        # 中文字体和编码支持
        LANG: 'zh_CN.UTF-8'
        LC_ALL: 'zh_CN.UTF-8'
        PYTHONIOENCODING: 'utf-8'
        PYTHONUTF8: '1'
        
      run: |
        echo "🚀 开始执行自动签到 (Repository secrets模式 - 回退模式)..."
        echo "⚠️ Environment secrets (98tang-autosign) 不可用，使用 Repository secrets"
        echo "📅 实际执行时间: $(date '+%Y-%m-%d %H:%M:%S') UTC"
        echo "🌏 北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "⏰ 调度策略: 北京时间0:00~0:30随机执行"
        echo "👤 用户名: $(echo $SITE_USERNAME | head -c 2)****$(echo $SITE_USERNAME | tail -c 3)"
        echo "🔗 目标网站: $BASE_URL"
        echo ""
        
        python main.py
        
    - name: 上传日志和调试文件
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: autosign-logs-repository-${{ github.run_number }}
        path: |
          logs/
        retention-days: 30
        
    - name: 执行结果通知
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ 自动签到执行成功 (Repository secrets模式 - 回退模式)"
          echo "💡 建议配置 98tang-autosign 环境以获得更好的安全性和管理"
        else
          echo "❌ 自动签到执行失败"
          echo "请查看日志了解详细信息"
        fi
